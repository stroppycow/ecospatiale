x<-x/2
x<-x/2
x<-x/2
x<-x/2
x<-x/2
x<-95973586
y<-c(x/2)
y<-c(y,y[length(y)]+y[length(y)]/2)
y<-c(y,y[length(y)]+y[length(y)]/2)
y<-c(y,y[length(y)]+y[length(y)]/2)
y<-c(y,y[length(y)]+y[length(y)]/2)
y<-c(y,y[length(y)]+y[length(y)]/2)
y<-c(y,y[length(y)]+y[length(y)]/2)
y<-c(y,y[length(y)]+y[length(y)]/2)
y<-c(y,y[length(y)]+y[length(y)]/2)
y<-c(y,y[length(y)]+y[length(y)]/2)
y<-c(y,y[length(y)]+y[length(y)]/2)
y<-c(y,y[length(y)]+y[length(y)]/2)
y<-c(y,y[length(y)]+y[length(y)]/2)
y<-c(y,y[length(y)]+y[length(y)]/2)
y<-c(y,y[length(y)]+y[length(y)]/2)
y<-c(y,y[length(y)]+y[length(y)]/2)
y<-c(y,y[length(y)]+y[length(y)]/2)
y<-c(y,y[length(y)]+y[length(y)]/2)
y<-c(y,y[length(y)]+y[length(y)]/2)
y<-c(y,y[length(y)]+y[length(y)]/2)
y<-c(y,y[length(y)]+y[length(y)]/2)
y<-c(y,y[length(y)]+y[length(y)]/2)
y<-c(y,y[length(y)]+y[length(y)]/2)
y<-c(y,y[length(y)]+y[length(y)]/2)
y<-c(y,y[length(y)]+y[length(y)]/2)
y<-c(y,y[length(y)]+y[length(y)]/2)
y<-c(y,y[length(y)]+y[length(y)]/2)
y<-c(y,y[length(y)]+y[length(y)]/2)
y
x<-95973586
y<-c(x/2)
y<-c(y,y[length(y)]+(x-y[length(y)])/2)
y<-c(y,y[length(y)]+(x-y[length(y)])/2)
y<-c(y,y[length(y)]+(x-y[length(y)])/2)
y<-c(y,y[length(y)]+(x-y[length(y)])/2)
y<-c(y,y[length(y)]+(x-y[length(y)])/2)
y<-c(y,y[length(y)]+(x-y[length(y)])/2)
y<-c(y,y[length(y)]+(x-y[length(y)])/2)
y<-c(y,y[length(y)]+(x-y[length(y)])/2)
y<-c(y,y[length(y)]+(x-y[length(y)])/2)
y<-c(y,y[length(y)]+(x-y[length(y)])/2)
y<-c(y,y[length(y)]+(x-y[length(y)])/2)
y<-c(y,y[length(y)]+(x-y[length(y)])/2)
y<-c(y,y[length(y)]+(x-y[length(y)])/2)
y<-c(y,y[length(y)]+(x-y[length(y)])/2)
y<-c(y,y[length(y)]+(x-y[length(y)])/2)
y<-c(y,y[length(y)]+(x-y[length(y)])/2)
y<-c(y,y[length(y)]+(x-y[length(y)])/2)
y<-c(y,y[length(y)]+(x-y[length(y)])/2)
y<-c(y,y[length(y)]+(x-y[length(y)])/2)
y<-c(y,y[length(y)]+(x-y[length(y)])/2)
y<-c(y,y[length(y)]+(x-y[length(y)])/2)
y<-c(y,y[length(y)]+(x-y[length(y)])/2)
y<-c(y,y[length(y)]+(x-y[length(y)])/2)
y<-c(y,y[length(y)]+(x-y[length(y)])/2)
y<-c(y,y[length(y)]+(x-y[length(y)])/2)
y<-c(y,y[length(y)]+(x-y[length(y)])/2)
y<-c(y,y[length(y)]+(x-y[length(y)])/2)
y
log2(96000000)
install.packages("shiny")
install.packages("FactoShiny ")
install.packages("FactoShiny")
install.packages("Factoshiny")
install.packages("VarSelLCM")
require(Factoshiny)
data(decathlon)
summary(decathlon)
res.pca <- PCA(decathlon, quanti.sup = 11:12, quali.sup=13)
res.shiny <- PCAshiny(res.pca)
require(VarSelLCM)
data(heart)
summary(heart)
res.cluster <- VarSelCluster(heart[,-13], 3, vbleSelec = FALSE)
res.cluster <- VarSelCluster(heart[,-13], 3, vbleSelec = FALSE)
res.shiny <- VarSelShiny(res.cluster)
require(shiny)
runExample("08_html")
runGitHub("GoogleAnalytics", "ChrisBeeley")
runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonPremierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonPremierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonPremierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonPremierShiny')
data(iris)
data("iris")
data(iris)
?iris
?plot
?plot
?plot
runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonPremierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonPremierShiny')
?iris
?par
data(iris)
?iris
library(datasets)
data(iris)
library(datasets)
data(iris)
data(iris)
library(shiny)
library(VarSelLCM)
data(iris)
remove(iris)
summay(iris$species)
data(iris)
remove(iris)
data(iris)
runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonPremierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonPremierShiny')
iris$Species
runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonPremierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonPremierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonPremierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonPremierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonPremierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonPremierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonPremierShiny')
?plot
runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonPremierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonPremierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonPremierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonPremierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonPremierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonPremierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonPremierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonPremierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonPremierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonPremierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonPremierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonPremierShiny')
shiny::runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonPremierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonPremierShiny')
library("shinytheme")
import.pakages("shinytheme")
install.pakages("shinytheme")
install.packages("shinythemes")
library("shinythemes")
?rexp
runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonSecondShiny/MonSecondShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonSecondShiny/MonSecondShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonSecondShiny/MonSecondShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonSecondShiny/MonSecondShiny')
?selectInput
runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonSecondShiny/MonSecondShiny')
?numericInput
runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonSecondShiny/MonSecondShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonSecondShiny/MonSecondShiny')
?hist
runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonSecondShiny/MonSecondShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonSecondShiny/MonSecondShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonSecondShiny/MonSecondShiny')
?dnorm
runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonSecondShiny/MonSecondShiny')
?hist
runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonSecondShiny/MonSecondShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonSecondShiny/MonSecondShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonSecondShiny/MonSecondShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonSecondShiny/MonSecondShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonSecondShiny/MonSecondShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonSecondShiny/MonSecondShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonSecondShiny/MonSecondShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonSecondShiny/MonSecondShiny')
?lines
runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonSecondShiny/MonSecondShiny')
?dnorm
runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonSecondShiny/MonSecondShiny')
?textInput
runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonSecondShiny/MonSecondShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonPremierShiny/MonSecondShiny/MonSecondShiny')
library(ggplot)
library("ggplot2")
install.packages("rgeoapi")
library("plyr")
devtools::install_github("ColinFay/rgeoapi")
library("devtools")
install.packages("devtools")
library("devtools")
devtools::install_github("ColinFay/rgeoapi")
geo <- ldply (53 , ComByReg )
library(plyr)
geo <- ldply (53 , ComByReg )
devtools::install_github("ColinFay/rgeoapi")
devtools::install_github("ColinFay/rgeoapi")
??rgeoapi
geo <- ldply (53 , "ComByReg"  )
geo <- ldply (53 , ComByReg)
geo <- ldply(53 , ComByReg)
ComByReg(53)
?ComByReg
library("rgeoapi")
ComByReg(53)
geo <- ldply(53 , ComByReg)
View(geo)
View(geo)
shiny::runApp('Cours/ENSAI/2A/RShiny/TP/MonDernierShiny/MonDernierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonDernierShiny/MonDernierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonDernierShiny/MonDernierShiny')
View(geo)
runApp('Cours/ENSAI/2A/RShiny/TP/MonDernierShiny/MonDernierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonDernierShiny/MonDernierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonDernierShiny/MonDernierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonDernierShiny/MonDernierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonDernierShiny/MonDernierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonDernierShiny/MonDernierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonDernierShiny/MonDernierShiny')
View(geo)
runApp('Cours/ENSAI/2A/RShiny/TP/MonDernierShiny/MonDernierShiny')
View(geo)
runApp('Cours/ENSAI/2A/RShiny/TP/MonDernierShiny/MonDernierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonDernierShiny/MonDernierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonDernierShiny/MonDernierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonDernierShiny/MonDernierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonDernierShiny/MonDernierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonDernierShiny/MonDernierShiny')
View(geo)
View(geo)
runApp('Cours/ENSAI/2A/RShiny/TP/MonDernierShiny/MonDernierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonDernierShiny/MonDernierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonDernierShiny/MonDernierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonDernierShiny/MonDernierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonDernierShiny/MonDernierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonDernierShiny/MonDernierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonDernierShiny/MonDernierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonDernierShiny/MonDernierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonDernierShiny/MonDernierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonDernierShiny/MonDernierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonDernierShiny/MonDernierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonDernierShiny/MonDernierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonDernierShiny/MonDernierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonDernierShiny/MonDernierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonDernierShiny/MonDernierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonDernierShiny/MonDernierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonDernierShiny/MonDernierShiny')
runApp('Cours/ENSAI/2A/RShiny/TP/MonDernierShiny/MonDernierShiny')
nomData <- read.csv("C:/Users/Théo/Documents/Cours/ENSAI/2A/Projet statistique/nomENSAI.csv",sep=";")
ratS2 <- read.csv("C:/Users/Théo/Documents/Cours/ENSAI/2A/Divers/ratS2.csv",sep=";")
ratS2<-ratS2[1:127,1:21]
ratrapage<-merge(ratS2,nomData,all.x=T,all.y=F,by.x="id",by.y="idENSAI")
View(ratrapage)
nomData <- read.csv("C:/Users/Théo/Documents/Cours/ENSAI/2A/Projet statistique/nomENSAI.csv",sep=";")
ratS2 <- read.csv("C:/Users/Théo/Documents/Cours/ENSAI/2A/Divers/ratS2.csv",sep=";")
ratS2<-ratS2[1:127,1:21]
ratrapage<-merge(ratS2,nomData,all.x=T,all.y=F,by.x="id",by.y="idENSAI")
View(ratrapage)
rattrapage[which(ratrapage$NomComplet=="HOFSTETTER Eric"),]
ratrapage[which(ratrapage$NomComplet=="HOFSTETTER Eric"),]
library(rgdal)
library(rgeos)
library(xlsx)
library(igraph)
library(maptools)
library(spdep)
library(graph)
library(gdata)
# Objectifs :
# - Importer les differents fichiers de données en objet R
# - Assurer la cohernce entre les differentes sources de données
# Champs : Communes de France métropolitaine, Guadeloupe, Martinique, Guyane et Réunion
#------------------------------------------------#
#           Shapefile des communes               #
#------------------------------------------------#
communes<-readOGR(dsn=path.expand("../shapefile/communes2017"),layer="communes-20170112",use_iconv = TRUE, encoding = "UTF-8")
#Retrait de Mayotte de l'étude
communes <- subset(communes,!(substr(communes@data$insee,1,3)=="976"))
communes@data$insee<-as.character(communes@data$insee)
#Vérification que le code insee est une cle de jointude (test de doublons)
communes@data[which(as.character(communes@data$insee) %in% names(which(table(communes@data$insee)>1))),]
#Probleme avec les polygones pour la ville d'Annecy (74010)
plot(communes[which(communes@data$insee == "74010"),],col=c("red","blue"))
#Le polygone rouge est plus grandque le bleu et se se superposent
#Identification du polygone à retenir en fonction des communes limitrophes
#Rouge
plot(communes[which(communes@data$insee == "74010"),],lty=0,col="transparent")
plot(communes[which((substr(communes@data$insee,1,2) == "74") & (as.character(communes@data$insee)!="74010")),],col=c("grey"),add=T)
plot(communes[which(communes@data$insee == "74010")[1],],col=c("red"),add=T)
#VS
#Bleu
plot(communes[which(communes@data$insee == "74010"),],lty=0,col="transparent")
plot(communes[which((substr(communes@data$insee,1,2) == "74") & (as.character(communes@data$insee)!="74010")),],col=c("grey"),add=T)
plot(communes[which(communes@data$insee == "74010")[2],],col=c("blue"),add=T)
#Conclusion : on conserve le rouge et on supprime le bleu
x<-rep(T,nrow(communes@data))
x[which(communes@data$insee == "74010")[2]]<-F
communes<-subset(communes,x)
#Retrait des iles
communes<-subset(communes, !(communes@data$insee %in% c("17004","22016","29082","29083","29084","29155","56069","56085","56086","56087","56088","85113","97110","97130","97131")))
#------------------------------------------------#
#   Resultats second tour presidentielle 2017    #
#------------------------------------------------#
#Importation de la table
pres2 <- read.xlsx2("../data/pres2017.xls",sheetIndex = 1,startRow=4,header=T)
#Supressions des colonnes inutiles (numero de panneau, nom, prenom, sexe des candidats)
pres2 <- pres2[,c(1:18,23:25,30:32)]
#Renommage des variables
names(pres2)<-c("codedep","libdep","codecomm","libcomm","n_inscrits","n_abstentions","pct_abstentions_inscrits","n_votants","pct_votants_inscrits","n_blanc","pct_blancs_inscrits","pct_blancs_votants","n_nuls","pct_nuls_inscrits","pct_nuls_votants","exprimes","pct_exprimes_inscrits","pct_exprimes_votant","n_macron","pct_macron_inscrits","pct_macron_votants","n_lepen","pct_lepen_inscrits","pct_lepen_votants")
#Modification des types des variables
pres2$libdep<-as.character(pres2$libdep)
pres2$libcomm<-as.character(pres2$libcomm)
pres2$n_inscrits<-as.integer(as.character(pres2$n_inscrits))
pres2$n_abstentions<-as.integer(as.character(pres2$n_abstentions))
pres2$n_votants<-as.integer(as.character(pres2$n_votants))
pres2$n_blanc<-as.integer(as.character(pres2$n_blanc))
pres2$n_nuls<-as.integer(as.character(pres2$n_nuls))
pres2$n_macron<-as.integer(as.character(pres2$n_macron))
pres2$n_lepen<-as.integer(as.character(pres2$n_lepen))
pres2$pct_abstentions_inscrits<-as.numeric(as.character(pres2$pct_abstentions_inscrits))
pres2$pct_blancs_inscrits<-as.numeric(as.character(pres2$pct_blancs_inscrits))
pres2$pct_blancs_votants<-as.numeric(as.character(pres2$pct_blancs_votants))
pres2$pct_exprimes_inscrits<-as.numeric(as.character(pres2$pct_exprimes_inscrits))
pres2$pct_exprimes_votant<-as.numeric(as.character(pres2$pct_exprimes_votant))
pres2$pct_lepen_inscrits<-as.numeric(as.character(pres2$pct_lepen_inscrits))
pres2$pct_lepen_votants<-as.numeric(as.character(pres2$pct_lepen_votants))
pres2$pct_macron_inscrits<-as.numeric(as.character(pres2$pct_macron_inscrits))
pres2$pct_macron_votants<-as.numeric(as.character(pres2$pct_macron_votants))
pres2$pct_nuls_inscrits<-as.numeric(as.character(pres2$pct_nuls_inscrits))
pres2$pct_nuls_votants<-as.numeric(as.character(pres2$pct_nuls_votants))
pres2$pct_votants_inscrits<-as.numeric(as.character(pres2$pct_votants_inscrits))
#Restriction de l'etude à la France metropolitaine, Guadeloupe, Martinique, Rénion et Guyane
pres2<-pres2[!(pres2$codedep %in% c("ZZ","ZS","ZP","ZW","ZX","ZN","ZM")),]
pres2$insee = sapply(1:nrow(pres2),function(x){
dep<-as.character(pres2[x,"codedep"])
dep<-ifelse(nchar(dep)==2,dep,paste0("0",dep))
dep<-ifelse(dep %in% c("ZA","ZB","ZC","ZD"),"97",dep)
com<-as.character(pres2[x,"codecomm"])
com<-ifelse(nchar(com)==3,com,ifelse(nchar(com)==2,paste0("0",com),paste0("00",com)))
insee<-paste0(dep,com)
})
#Retrait des iles
pres2<-pres2[!(pres2$insee %in% c("17004","22016","29082","29083","29084","29155","56069","56085","56086","56087","56088","85113","97110","97130","97131")),]
#Etude pre-fusion avec le shapefile des communes
dfShape<-data.frame(insee=as.character(communes@data$insee),nom=as.character(communes@data$nom))
fusion<-merge(dfShape,pres2[,c("insee","libcomm")],by="insee",all=T)
fusion[is.na(fusion$nom),c("insee","libcomm")]
#Conclusion : Toutes les communes dans la table pres2 sont dans le shapefile "communes"
fusion[is.na(fusion$libcomm),c("insee","nom")]
#Conclusion : Certaines communes sont dans le shapefile mais pas dans le fichier de resultats
#2 problemes :
#-Polygones pour Saint-Pierre et Miquelon qui a été retiré de l'étude (97501,97502)
#-Polygones pour les villages français de la Meuse détruits pendant la premiere guerre mondiale (55039,55050,55139,55189,55239,55307)
rm(dfShape)
rm(fusion)
#Retrait de ces polygones
communes <- subset(communes,!(communes@data$insee %in% c("55039","55050","55139","55189","55239","55307","97501","97502")))
setwd("~/Cours/ENSAI/Master/Economerie spatiale/ecospatiale")
library(rgdal)
library(rgeos)
library(xlsx)
library(igraph)
library(maptools)
library(spdep)
library(graph)
library(gdata)
# Objectifs :
# - Importer les differents fichiers de données en objet R
# - Assurer la cohernce entre les differentes sources de données
# Champs : Communes de France métropolitaine, Guadeloupe, Martinique, Guyane et Réunion
#------------------------------------------------#
#           Shapefile des communes               #
#------------------------------------------------#
communes<-readOGR(dsn=path.expand("../shapefile/communes2017"),layer="communes-20170112",use_iconv = TRUE, encoding = "UTF-8")
#Retrait de Mayotte de l'étude
communes <- subset(communes,!(substr(communes@data$insee,1,3)=="976"))
communes@data$insee<-as.character(communes@data$insee)
#Vérification que le code insee est une cle de jointude (test de doublons)
communes@data[which(as.character(communes@data$insee) %in% names(which(table(communes@data$insee)>1))),]
#Probleme avec les polygones pour la ville d'Annecy (74010)
plot(communes[which(communes@data$insee == "74010"),],col=c("red","blue"))
#Le polygone rouge est plus grandque le bleu et se se superposent
#Identification du polygone à retenir en fonction des communes limitrophes
#Rouge
plot(communes[which(communes@data$insee == "74010"),],lty=0,col="transparent")
plot(communes[which((substr(communes@data$insee,1,2) == "74") & (as.character(communes@data$insee)!="74010")),],col=c("grey"),add=T)
plot(communes[which(communes@data$insee == "74010")[1],],col=c("red"),add=T)
#VS
#Bleu
plot(communes[which(communes@data$insee == "74010"),],lty=0,col="transparent")
plot(communes[which((substr(communes@data$insee,1,2) == "74") & (as.character(communes@data$insee)!="74010")),],col=c("grey"),add=T)
plot(communes[which(communes@data$insee == "74010")[2],],col=c("blue"),add=T)
#Conclusion : on conserve le rouge et on supprime le bleu
x<-rep(T,nrow(communes@data))
x[which(communes@data$insee == "74010")[2]]<-F
communes<-subset(communes,x)
#Retrait des iles
communes<-subset(communes, !(communes@data$insee %in% c("17004","22016","29082","29083","29084","29155","56069","56085","56086","56087","56088","85113","97110","97130","97131")))
#------------------------------------------------#
#   Resultats second tour presidentielle 2017    #
#------------------------------------------------#
#Importation de la table
pres2 <- read.xlsx2("../data/pres2017.xls",sheetIndex = 1,startRow=4,header=T)
#Supressions des colonnes inutiles (numero de panneau, nom, prenom, sexe des candidats)
pres2 <- pres2[,c(1:18,23:25,30:32)]
#Renommage des variables
names(pres2)<-c("codedep","libdep","codecomm","libcomm","n_inscrits","n_abstentions","pct_abstentions_inscrits","n_votants","pct_votants_inscrits","n_blanc","pct_blancs_inscrits","pct_blancs_votants","n_nuls","pct_nuls_inscrits","pct_nuls_votants","exprimes","pct_exprimes_inscrits","pct_exprimes_votant","n_macron","pct_macron_inscrits","pct_macron_votants","n_lepen","pct_lepen_inscrits","pct_lepen_votants")
#Modification des types des variables
pres2$libdep<-as.character(pres2$libdep)
pres2$libcomm<-as.character(pres2$libcomm)
pres2$n_inscrits<-as.integer(as.character(pres2$n_inscrits))
pres2$n_abstentions<-as.integer(as.character(pres2$n_abstentions))
pres2$n_votants<-as.integer(as.character(pres2$n_votants))
pres2$n_blanc<-as.integer(as.character(pres2$n_blanc))
pres2$n_nuls<-as.integer(as.character(pres2$n_nuls))
pres2$n_macron<-as.integer(as.character(pres2$n_macron))
pres2$n_lepen<-as.integer(as.character(pres2$n_lepen))
pres2$pct_abstentions_inscrits<-as.numeric(as.character(pres2$pct_abstentions_inscrits))
pres2$pct_blancs_inscrits<-as.numeric(as.character(pres2$pct_blancs_inscrits))
pres2$pct_blancs_votants<-as.numeric(as.character(pres2$pct_blancs_votants))
pres2$pct_exprimes_inscrits<-as.numeric(as.character(pres2$pct_exprimes_inscrits))
pres2$pct_exprimes_votant<-as.numeric(as.character(pres2$pct_exprimes_votant))
pres2$pct_lepen_inscrits<-as.numeric(as.character(pres2$pct_lepen_inscrits))
pres2$pct_lepen_votants<-as.numeric(as.character(pres2$pct_lepen_votants))
pres2$pct_macron_inscrits<-as.numeric(as.character(pres2$pct_macron_inscrits))
pres2$pct_macron_votants<-as.numeric(as.character(pres2$pct_macron_votants))
pres2$pct_nuls_inscrits<-as.numeric(as.character(pres2$pct_nuls_inscrits))
pres2$pct_nuls_votants<-as.numeric(as.character(pres2$pct_nuls_votants))
pres2$pct_votants_inscrits<-as.numeric(as.character(pres2$pct_votants_inscrits))
#Restriction de l'etude à la France metropolitaine, Guadeloupe, Martinique, Rénion et Guyane
pres2<-pres2[!(pres2$codedep %in% c("ZZ","ZS","ZP","ZW","ZX","ZN","ZM")),]
pres2$insee = sapply(1:nrow(pres2),function(x){
dep<-as.character(pres2[x,"codedep"])
dep<-ifelse(nchar(dep)==2,dep,paste0("0",dep))
dep<-ifelse(dep %in% c("ZA","ZB","ZC","ZD"),"97",dep)
com<-as.character(pres2[x,"codecomm"])
com<-ifelse(nchar(com)==3,com,ifelse(nchar(com)==2,paste0("0",com),paste0("00",com)))
insee<-paste0(dep,com)
})
#Retrait des iles
pres2<-pres2[!(pres2$insee %in% c("17004","22016","29082","29083","29084","29155","56069","56085","56086","56087","56088","85113","97110","97130","97131")),]
#Etude pre-fusion avec le shapefile des communes
dfShape<-data.frame(insee=as.character(communes@data$insee),nom=as.character(communes@data$nom))
fusion<-merge(dfShape,pres2[,c("insee","libcomm")],by="insee",all=T)
fusion[is.na(fusion$nom),c("insee","libcomm")]
#Conclusion : Toutes les communes dans la table pres2 sont dans le shapefile "communes"
fusion[is.na(fusion$libcomm),c("insee","nom")]
#Conclusion : Certaines communes sont dans le shapefile mais pas dans le fichier de resultats
#2 problemes :
#-Polygones pour Saint-Pierre et Miquelon qui a été retiré de l'étude (97501,97502)
#-Polygones pour les villages français de la Meuse détruits pendant la premiere guerre mondiale (55039,55050,55139,55189,55239,55307)
rm(dfShape)
rm(fusion)
#Retrait de ces polygones
communes <- subset(communes,!(communes@data$insee %in% c("55039","55050","55139","55189","55239","55307","97501","97502")))
library(rgdal)
library(rgeos)
library(RColorBrewer)
library(classInt)
library(maptools)
library(plyr)
library(spdep)
nb<-poly2nb(communes)
communes <- merge(communes,pres2,by="insee")
nb<-poly2nb(communes)
cont.w<-nb2listw(nb,style="W")
### Représentation cartographique du graphique de Moran
vPal4 <- rev(brewer.pal(n = 4, name = "RdYlBu"))
v_tx<-lag.listw(cont.w,communes@data$pct_macron_votants)
communes@data$v_tx<-v_tx
communes@data$hs[communes@data$v_tx>=mean(communes@data$pct_macron_votants) & communes@data$pct_macron_votants>=mean(communes@data$pct_macron_votants)]<-4.0
communes@data$hs[communes@data$v_tx>=mean(communes@data$pct_macron_votants) & communes@data$pct_macron_votants<mean(communes@data$pct_macron_votants)]<-3.0
communes@data$hs[communes@data$v_tx<mean(communes@data$pct_macron_votants) & communes@data$pct_macron_votants>=mean(communes@data$pct_macron_votants)]<-2.0
communes@data$hs[communes@data$v_tx<mean(communes@data$pct_macron_votants) & communes@data$pct_macron_votants<mean(communes@data$pct_macron_votants)]<-1.0
communes@data$hs<-communes@data$hs
x1<-bbox(communes)[1,1]
x2<-bbox(communes)[1,2]
communes@data$Colors <- as.character(vPal4[as.numeric(communes@data$hs)])
metro<-subset(communes,substr(as.character(communes@data$insee),1,2)!="97")
pdf("../sorties/auto2.pdf",width=7,height=7.5)
par(mar=c(0.1,0.1,4,3))
plot(metro, col=metro@data$Colors,lty=0)
legend("topright",
legend = c('BB','BH','HB','HH'),
bty = "n",
fill = vPal4,
cex = 0.5,
title = "Classes")
dev.off()
mod<-lm(pct_macron_votants~log(P15_POP)+MED15+TCHOM_15+F_PROP+P15_PROP0014+P15_PROP0014+P15_PROP1529+P15_PROP4559+P15_PROP6074+P15_PROP7589+P15_PROP90P+C15_PROP15P_CS1+C15_PROP15P_CS2+C15_PROP15P_CS3+C15_PROP15P_CS5+C15_PROP15P_CS6+C15_PROP15P_CS7+C15_PROP15P_CS8,data=communes@data)
#Importation de la table
base_cc <- read.xlsx2("../data/base_cc_comparateur.xls",sheetIndex = 1,startRow=6,header=T)
#Prise en compte des fusions de communes (ligne NA dans la base cc)
base_cc <-base_cc[!is.na(base_cc$P15_POP),]
base_cc$insee<-as.character(base_cc$CODGEO)
#Retrait des villages français de la Meuse détruits pendant la premiere guerre mondiale (55039,55050,55139,55189,55239,55307)
base_cc <- base_cc[!(base_cc$CODGEO %in% c("55039","55050","55139","55189","55239","55307")),]
#Retrait des îles
base_cc <- base_cc[!(base_cc$CODGEO %in% c("17004","22016","29082","29083","29084","29155","56069","56085","56086","56087","56088","85113","97110","97130","97131")),]
#Modification des types des variables base_cc$LIBGEO<-as.character(base_cc$LIBGEO)
for(i in 5:ncol(base_cc)){
base_cc[,i]<-as.numeric(as.character(base_cc[,i]))
}
#Tests ensemblistes
fusion <- merge(data.frame(insee=as.character(communes@data$insee),nom=as.character(communes@data$nom)),data.frame(insee=as.character(base_cc$CODGEO),LIBGEO=as.character(base_cc$LIBGEO)),by="insee",all=T)
fusion[is.na(fusion$nom),c("insee","LIBGEO")]
fusion[is.na(fusion$LIBGEO),c("insee","nom")]
rm(fusion)
data_demo<-read.xls("../data/base-cc-evol-struct-pop-2015.xls",sheet = 1,skip=5)
#Retrait des villages français de la Meuse détruits pendant la premiere guerre mondiale (55039,55050,55139,55189,55239,55307)
data_demo <- data_demo[!(data_demo$CODGEO %in% c("55039","55050","55139","55189","55239","55307")),]
#Retrait des îles
data_demo <- data_demo[!(data_demo$CODGEO %in% c("17004","22016","29082","29083","29084","29155","56069","56085","56086","56087","56088","85113","97110","97130","97131")),]
data_demo$insee <- as.character(data_demo$CODGEO)
fusion <- merge(data.frame(insee=as.character(communes@data$insee),nom=as.character(communes@data$nom)),data.frame(insee=as.character(data_demo$CODGEO),LIBGEO=as.character(data_demo$LIBGEO)),by="insee",all=T)
fusion[is.na(fusion$nom),c("insee","LIBGEO")]
fusion[is.na(fusion$LIBGEO),c("insee","nom")]
rm(fusion)
